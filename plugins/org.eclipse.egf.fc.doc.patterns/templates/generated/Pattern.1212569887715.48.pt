<%@ jet package="org.eclipse.egf.fc.doc.gen.htmlfcdoc" class="HtmlFcDocGenerator" imports="java.util.Iterator org.eclipse.egf.model.* org.eclipse.egf.model.data.helper.ModelHelper org.eclipse.egf.core.data.helper.DataHelper org.eclipse.egf.fc.doc.patterns.internal.*" %>
<%
{
// Start of HtmlFcDoc (full id = patternLibrary.1212569425341.37/Pattern.1212569887715.48).
StringBuilder pattern121256988771548BuilderSave = new StringBuilder(stringBuffer);
StringBuilder pattern121256988771548Builder = new StringBuilder();
org.eclipse.egf.pattern.ecore.condition.IPatternCondition pattern121256988771548Condition = (org.eclipse.egf.pattern.ecore.condition.IPatternCondition) org.eclipse.egf.common.helper.ExtensionPointHelper.createExecutableExtension("org.eclipse.egf.pattern","patternCondition","patternId","patternLibrary.1212569425341.37/Pattern.1212569887715.48");
if (null != pattern121256988771548Condition) {
pattern121256988771548Condition.setContext(context);
java.util.List<org.eclipse.egf.pattern.relations.ParameterRelation> pattern121256988771548Parameters = org.eclipse.egf.pattern.ecore.PatternConditionHelper.getPatternParameters("patternLibrary.1212569425341.37/Pattern.1212569887715.48");
java.util.Map<String, org.eclipse.emf.ecore.EObject>  pattern121256988771548Result = new java.util.HashMap<String, org.eclipse.emf.ecore.EObject> ();
org.eclipse.egf.pattern.relations.ParameterRelation factoryComponentRelation = pattern121256988771548Parameters.get(0);
java.util.Collection<org.eclipse.emf.ecore.EObject> factoryComponentCollection = new org.eclipse.emf.query.statements.SELECT(new org.eclipse.emf.query.statements.FROM(resource.getContents()), new org.eclipse.emf.query.statements.WHERE(new org.eclipse.emf.query.conditions.eobjects.EObjectTypeRelationCondition(org.eclipse.egf.common.helper.EcoreHelper.getStaticClass(factoryComponentRelation.getType()),org.eclipse.emf.query.conditions.eobjects.TypeRelation.SAMETYPE_OR_SUBTYPE_LITERAL))).execute();
for (org.eclipse.emf.ecore.EObject factoryComponentLoop : factoryComponentCollection) {
FactoryComponent factoryComponent =  (FactoryComponent) factoryComponentLoop;
if (pattern121256988771548Condition.check(factoryComponentLoop)) {
stringBuffer = new StringBuffer();
%>
<%String factoryComponentName = factoryComponent.getName();%>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
	<title>
		<%=factoryComponentName%>
	</title>
	<link rel="stylesheet" href="../book.css" charset="ISO-8859-1" type="text/css" />
</head>

<body xml:lang="EN-US" lang="EN-US">
<div align="right">
  &nbsp;
  <font face="Times New Roman, Times, serif" size="2">
  Copyright <a href="http://www.epm.services.thales/wps/portal/epm">Thales EPM</a> 2008. All rights reserved
  </font>  
  <table border="0" cellpadding="2" cellspacing="0" width="100%">
    <tbody>
      <tr>
      	<td colspan="2" align="left" bgcolor="#0080c0" valign="top">
      	  <b><font face="Arial,Helvetica"><font color="#ffffff">
      	  &nbsp;Factory Component Description 
      	  </font></font></b>
      	</td>
      </tr>
  	</tbody>
  </table>
</div><h1 align="center"><%=factoryComponentName%></h1>
<blockquote>
  <b>Summary</b>
  <br/>
  <p>
  	<%=DataHelper.getDescription(factoryComponent)%>
  </p>
</blockquote>
<hr width="100%" />
<h2>Contract Description</h2>
<p>
<ul>
<%Contract contract = ModelHelper.getContract(factoryComponent);
	Iterator<ContractElement> contractElements = contract.getContractElements().iterator();
	while (contractElements.hasNext()) {	 
	 	ContractElement currentContractElement = contractElements.next();
	 	String contractElementName = currentContractElement.getName();
	 	String contractElementType = currentContractElement.getContractType().getTypeHolderClassName();
	 	String contractElementMandatoryValue = "No"; //$NON-NLS-1$
	 	String contractElementMandatoryImage = "ContractElement"; //$NON-NLS-1$
	 	if (currentContractElement.isMandatory()) {
	 		contractElementMandatoryValue = "Yes"; //$NON-NLS-1$
	 		contractElementMandatoryImage = "MandatoryContractElement"; //$NON-NLS-1$
	 	}
	 	String contractElementDescription = DataHelper.getDescription(currentContractElement);
	 	if (null == contractElementDescription) {
	 		contractElementDescription = "Empty Description"; //$NON-NLS-1$
	 	}
%>
	<li><img src="../../../org.eclipse.egf.model.edit/icons/full/obj16/<%=contractElementMandatoryImage%>.gif" border="0" /> 
  <b><%=contractElementName%></b> :<br/>
	<%=contractElementDescription%>
	<ul>
		<li><b>Type holder class</b> : <%=contractElementType%></li>
		<li><b>Mandatory</b> : <%=contractElementMandatoryValue%></li>
	</ul>
	</li>
	<br/>
<%}%>
</ul>
</p>
<h2>Patterns Description</h2>
<p>
<% PatternViewpoint patternViewpoint = ModelHelper.getPatternViewpoint(factoryComponent);
	String patternViewpointDescription = PatternDescriptionHelper.generateDescription(patternViewpoint);
%>
<%=patternViewpointDescription%>
</p>
<h2>Mapping Description</h2>
<p>
<ul>
<% MappingViewpoint mappingViewpoint = ModelHelper.getMappingViewpoint(factoryComponent);
	Iterator<MappingModel> mappings = mappingViewpoint.getMappings().iterator();
	while(mappings.hasNext()) {	 
	 	MappingModel currentMapping = mappings.next();
	 	String mappingName = currentMapping.getName();
	 	String mappingId = currentMapping.getId();
	 	String mappingPath = currentMapping.getPath();
	 	org.eclipse.egf.core.CoreActivator coreActivator = org.eclipse.egf.core.CoreActivator.getDefault();
	 	FactoryComponent fcAsSource = coreActivator.getFactoryComponent(currentMapping.getSource());
	 	FactoryComponent fcAsTarget = coreActivator.getFactoryComponent(currentMapping.getTarget());
%>
	<li><img src="../../../org.eclipse.egf.model.edit/icons/full/obj16/MappingModel.gif" border="0" />
	<b><%=mappingName%></b> (id: <b><%=mappingId%></b>) :<br/>
	<ul>
		<li><b>Path</b> : <%=mappingPath%></li>
		<li><b>Factory Component used as source (domain provided by)</b> : <%= fcAsSource.getName()%></li>
		<li><b>Factory Component used as target (domain provided by)</b> : <%= fcAsTarget.getName()%></li>
	</ul>
	</li>
	<br/>
<%}%>	
</ul>
</p>
<h2>Factory Description</h2>
<p>
Description of each declared asset configuration in the FC's factory.
</p>


</body>
</html>
<%
pattern121256988771548Result.put(factoryComponentRelation.getName(), factoryComponentLoop);
reporter.patternLoopExecutionFinished(stringBuffer.toString(),"patternLibrary.1212569425341.37/Pattern.1212569887715.48",context,pattern121256988771548Result);
pattern121256988771548Builder.append(stringBuffer);
}
}
}
stringBuffer = new StringBuffer(pattern121256988771548BuilderSave).append(pattern121256988771548Builder);
reporter.patternExecutionFinished(pattern121256988771548Builder.toString(),"patternLibrary.1212569425341.37/Pattern.1212569887715.48",context);
// End of HtmlFcDoc (full id = patternLibrary.1212569425341.37/Pattern.1212569887715.48).
}
%>
