/*******************************************************************************
 *  Copyright (c) 2009 Thales Corporate Services S.A.S.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 * 
 *  Contributors:
 *      Thales Corporate Services S.A.S - initial API and implementation
 *******************************************************************************/
package org.eclipse.egf.model.provider;


import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.egf.model.util.ModelAdapterFactory;
import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ModelItemProviderAdapterFactory extends ModelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ModelItemProviderAdapterFactory() {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.egf.model.FactoryComponent} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FactoryComponentItemProvider factoryComponentItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.egf.model.FactoryComponent}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createFactoryComponentAdapter() {
    if (factoryComponentItemProvider == null) {
      factoryComponentItemProvider = new FactoryComponentItemProvider(this);
    }

    return factoryComponentItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.egf.model.Domain} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DomainItemProvider domainItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.egf.model.Domain}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDomainAdapter() {
    if (domainItemProvider == null) {
      domainItemProvider = new DomainItemProvider(this);
    }

    return domainItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.egf.model.Specification} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SpecificationItemProvider specificationItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.egf.model.Specification}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createSpecificationAdapter() {
    if (specificationItemProvider == null) {
      specificationItemProvider = new SpecificationItemProvider(this);
    }

    return specificationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.egf.model.Contract} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ContractItemProvider contractItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.egf.model.Contract}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createContractAdapter() {
    if (contractItemProvider == null) {
      contractItemProvider = new ContractItemProvider(this);
    }

    return contractItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.egf.model.ContractElement} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ContractElementItemProvider contractElementItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.egf.model.ContractElement}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createContractElementAdapter() {
    if (contractElementItemProvider == null) {
      contractElementItemProvider = new ContractElementItemProvider(this);
    }

    return contractElementItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.egf.model.ContractElementReference} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ContractElementReferenceItemProvider contractElementReferenceItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.egf.model.ContractElementReference}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createContractElementReferenceAdapter() {
    if (contractElementReferenceItemProvider == null) {
      contractElementReferenceItemProvider = new ContractElementReferenceItemProvider(this);
    }

    return contractElementReferenceItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.egf.model.Type} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TypeItemProvider typeItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.egf.model.Type}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTypeAdapter() {
    if (typeItemProvider == null) {
      typeItemProvider = new TypeItemProvider(this);
    }

    return typeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.egf.model.PatternViewpoint} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PatternViewpointItemProvider patternViewpointItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.egf.model.PatternViewpoint}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPatternViewpointAdapter() {
    if (patternViewpointItemProvider == null) {
      patternViewpointItemProvider = new PatternViewpointItemProvider(this);
    }

    return patternViewpointItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.egf.model.PatternLibrary} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PatternLibraryItemProvider patternLibraryItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.egf.model.PatternLibrary}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPatternLibraryAdapter() {
    if (patternLibraryItemProvider == null) {
      patternLibraryItemProvider = new PatternLibraryItemProvider(this);
    }

    return patternLibraryItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.egf.model.PatternModel} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PatternModelItemProvider patternModelItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.egf.model.PatternModel}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createPatternModelAdapter() {
    if (patternModelItemProvider == null) {
      patternModelItemProvider = new PatternModelItemProvider(this);
    }

    return patternModelItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.egf.model.Factory} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FactoryItemProvider factoryItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.egf.model.Factory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createFactoryAdapter() {
    if (factoryItemProvider == null) {
      factoryItemProvider = new FactoryItemProvider(this);
    }

    return factoryItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.egf.model.ProductionPlan} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProductionPlanItemProvider productionPlanItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.egf.model.ProductionPlan}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createProductionPlanAdapter() {
    if (productionPlanItemProvider == null) {
      productionPlanItemProvider = new ProductionPlanItemProvider(this);
    }

    return productionPlanItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.egf.model.Context} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ContextItemProvider contextItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.egf.model.Context}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createContextAdapter() {
    if (contextItemProvider == null) {
      contextItemProvider = new ContextItemProvider(this);
    }

    return contextItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.egf.model.ContextElement} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ContextElementItemProvider contextElementItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.egf.model.ContextElement}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createContextElementAdapter() {
    if (contextElementItemProvider == null) {
      contextElementItemProvider = new ContextElementItemProvider(this);
    }

    return contextElementItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.egf.model.FactoryComponentInvocation} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FactoryComponentInvocationItemProvider factoryComponentInvocationItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.egf.model.FactoryComponentInvocation}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createFactoryComponentInvocationAdapter() {
    if (factoryComponentInvocationItemProvider == null) {
      factoryComponentInvocationItemProvider = new FactoryComponentInvocationItemProvider(this);
    }

    return factoryComponentInvocationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.egf.model.TaskFactoryHolder} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TaskFactoryHolderItemProvider taskFactoryHolderItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.egf.model.TaskFactoryHolder}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTaskFactoryHolderAdapter() {
    if (taskFactoryHolderItemProvider == null) {
      taskFactoryHolderItemProvider = new TaskFactoryHolderItemProvider(this);
    }

    return taskFactoryHolderItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.egf.model.MappingViewpoint} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MappingViewpointItemProvider mappingViewpointItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.egf.model.MappingViewpoint}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createMappingViewpointAdapter() {
    if (mappingViewpointItemProvider == null) {
      mappingViewpointItemProvider = new MappingViewpointItemProvider(this);
    }

    return mappingViewpointItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.egf.model.MappingModel} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MappingModelItemProvider mappingModelItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.egf.model.MappingModel}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createMappingModelAdapter() {
    if (mappingModelItemProvider == null) {
      mappingModelItemProvider = new MappingModelItemProvider(this);
    }

    return mappingModelItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory() {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type) {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type) {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type) {
    if (isFactoryForType(type)) {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener) {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener) {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void fireNotifyChanged(Notification notification) {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null) {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void dispose() {
    if (factoryComponentItemProvider != null) factoryComponentItemProvider.dispose();
    if (productionPlanItemProvider != null) productionPlanItemProvider.dispose();
    if (factoryComponentInvocationItemProvider != null) factoryComponentInvocationItemProvider.dispose();
    if (domainItemProvider != null) domainItemProvider.dispose();
    if (specificationItemProvider != null) specificationItemProvider.dispose();
    if (contractItemProvider != null) contractItemProvider.dispose();
    if (contractElementItemProvider != null) contractElementItemProvider.dispose();
    if (contractElementReferenceItemProvider != null) contractElementReferenceItemProvider.dispose();
    if (typeItemProvider != null) typeItemProvider.dispose();
    if (patternViewpointItemProvider != null) patternViewpointItemProvider.dispose();
    if (patternLibraryItemProvider != null) patternLibraryItemProvider.dispose();
    if (patternModelItemProvider != null) patternModelItemProvider.dispose();
    if (factoryItemProvider != null) factoryItemProvider.dispose();
    if (contextItemProvider != null) contextItemProvider.dispose();
    if (contextElementItemProvider != null) contextElementItemProvider.dispose();
    if (taskFactoryHolderItemProvider != null) taskFactoryHolderItemProvider.dispose();
    if (mappingViewpointItemProvider != null) mappingViewpointItemProvider.dispose();
    if (mappingModelItemProvider != null) mappingModelItemProvider.dispose();
  }

}
