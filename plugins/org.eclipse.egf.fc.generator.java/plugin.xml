<?xml version="1.0" encoding="UTF-8"?>
<?eclipse version="3.2"?><!--
     Copyright (c) 2009 Thales Corporate Services S.A.S.
     All rights reserved. This program and the accompanying materials
     are made available under the terms of the Eclipse Public License v1.0
     which accompanies this distribution, and is available at
     http://www.eclipse.org/legal/epl-v10.html
    
     Contributors:
         Thales Corporate Services S.A.S - initial API and implementation
 -->

<plugin>
   <extension
         point="org.eclipse.egf.core.productionPlan">
      <productionPlan
            id="javaCodeGeneratorAsset.productionPlan">
         <assetConfiguration
               id="javaCodeGeneratorAsset.assetConfiguration">
         </assetConfiguration>
      </productionPlan>
   </extension>
   <extension
         point="org.eclipse.egf.core.assetConfiguration">
      <assetConfiguration
            assetId="rootAsset"
            id="javaCodeGeneratorAsset.assetConfiguration"
            name="javaCodeGeneratorAsset.assetConfiguration"
            taskFactoryId="javaCodeGeneratorAsset.taskFactory">
      </assetConfiguration>
   </extension>
   <extension
         point="org.eclipse.egf.core.taskFactory">
      <taskFactory
            class="org.eclipse.egf.fc.generator.java.task.GeneratorJavaTaskFactory"
            id="javaCodeGeneratorAsset.taskFactory">
      </taskFactory>
   </extension>
   <extension
         point="org.eclipse.egf.core.contract">
      <contract
            id="javaCodeGeneratorAsset.contract">
         <contractElement
               id="javaCodeGeneratorAsset.contract.genModelGenerator"
               mandatory="true"
               name="genModelGenerator"
               type="org.eclipse.egf.fc.generator.java.contract.type.GenModelGeneratorTypeHolder">
            <description
                  id="javaCodeGeneratorAsset.contract.genModelGenerator.description">
               Provides services to generate EMF genmodel from an input.
Matching context element must provide a class that extends org.eclipse.egf.fc.generator.java.model.AbstractGenModelGenerator that is able to handle the input.
Default ones are provided (e.g EcoreGenModelGenerator).
            </description>
         </contractElement>
         <contractElement
               id="javaCodeGeneratorAsset.contract.assetProjectName"
               mandatory="true"
               name="assetProjectName"
               type="org.eclipse.egf.model.contract.type.StringTypeHolder">
            <description
                  id="javaCodeGeneratorAsset.contract.assetProjectName.description">
               The relative path of the project (in the workspace) that hosts the generation.
            </description>
         </contractElement>
         <contractElement
               id="javaCodeGeneratorAsset.contract.basePackage"
               mandatory="true"
               name="basePackage"
               type="org.eclipse.egf.model.contract.type.StringTypeHolder">
            <description
                  id="javaCodeGeneratorAsset.contract.basePackage.description">
               Specifies the Java package of which the generated package will be a subpackage (cf 'Base Package' property of EMF genmodel).
            </description>
         </contractElement>
         <contractElement
               id="javaCodeGeneratorAsset.contract.generatorAdatperFactory"
               mandatory="false"
               name="generatorAdapterFactory"
               type="org.eclipse.egf.fc.generator.java.contract.type.GeneratorAdapterFactoryTypeHolder">
            <description
                  id="javaCodeGeneratorAsset.contract.generatorAdatperFactory.description">
               A factory for adapters that modify code generation.
Matching context element must provide a class that extends org.eclipse.egf.fc.generator.java.model.AbstractGenModelGeneratorAdapterFactory.
            </description>
         </contractElement>
         <contractElement
               id="javaCodeGeneratorAsset.contract.inputPath"
               mandatory="true"
               name="inputPath"
               type="org.eclipse.egf.model.contract.type.StringTypeHolder">
            <description
                  id="javaCodeGeneratorAsset.contract.inputPath.description">
               A relative path to locate either an Ecore file (against the eclipse platform) or a folder (in the workspace only) that contains annotated java interfaces.
            </description>
         </contractElement>
         <contractElement
               id="javaCodeGeneratorAsset.contract.emfRootClass"
               mandatory="false"
               name="emfRootClass"
               type="org.eclipse.egf.model.contract.type.StringTypeHolder">
            <description
                  id="javaCodeGeneratorAsset.contract.emfRootClass.description">
               Used to change the base class of all implementations generated for modeled classes (cf 'Root extends Class' property of EMF genmodel).
Default value : org.eclipse.emf.ecore.impl.EObjectImpl
            </description>
         </contractElement>
         <contractElement
               id="javaCodeGeneratorAsset.contract.emfRootInterface"
               mandatory="false"
               name="emfRootInterface"
               type="org.eclipse.egf.model.contract.type.StringTypeHolder">
            <description
                  id="javaCodeGeneratorAsset.contract.emfRootInterface.description">
               Similar to emfRootClass, but it specifies the qualified name of an interface to be extended by the interfaces generated for the model's root classes (cf 'Root extends Interface' property of EMF genmodel).
Default value : org.eclipse.emf.ecore.EObject
            </description>
         </contractElement>
         <contractElement
               id="javaCodeGeneratorAsset.contract.jdkComplianceLevel"
               mandatory="false"
               name="jdkComplianceLevel"
               type="org.eclipse.egf.fc.generator.java.contract.type.JdkComplianceLevelTypeHolder">
            <description
                  id="javaCodeGeneratorAsset.contract.jdkComplianceLevel.description">
               Specify the Java compliance level.
Following values are possible : 1.4, 5.0, 6.0.
Default value : 1.4
            </description>
         </contractElement>
         <contractElement
               id="javaCodeGeneratorAsset.contract.modelDirectory"
               mandatory="false"
               name="modelDirectory"
               type="org.eclipse.egf.model.contract.type.StringTypeHolder">
            <description
                  id="javaCodeGeneratorAsset.contract.modelDirectory.description">
               Source folder name where the generated code is produced.
Default value is : src
            </description>
         </contractElement>
         <contractElement
               id="contractElement.1202486826042.7"
               mandatory="false"
               name="resourceType"
               type="org.eclipse.egf.fc.generator.java.contract.type.ResourceTypeHolder">
            <description
                  id="contractElement.1202486826042.7.description">
               Specifies whether to create a customizable resource and resource factory implementation for the package and, if so, which base class the resource should extend (cf 'Resource Type' property of EMF genmodel).
Following values are possible : None, Basic, XML, XMI.
Default value : None
            </description>
         </contractElement>
         <contractElement
               id="contractElement.1203330951566.8"
               mandatory="false"
               name="utilityPackageSuffix"
               type="org.eclipse.egf.model.contract.type.StringTypeHolder">
            <description
                  id="contractElement.1203330951566.8.description">
               The package suffix defines the last segment of the Java packages into which the various types of classes are generated.
Utility package suffix is used for switch, validator, resource, and adapter factory classes.
Default value : util
            </description>
         </contractElement>
         <contractElement
               id="contractElement.1203330839865.7"
               mandatory="false"
               name="metadataPackageSuffix"
               type="org.eclipse.egf.model.contract.type.StringTypeHolder">
            <description
                  id="contractElement.1203330839865.7.description">
               The package suffix defines the last segment of the Java packages into which the various types of classes are generated.
Metadata package suffix is used for package and factory classes.
Default value : empty suffix
            </description>
         </contractElement>
         <contractElement
               id="contractElement.1203331335286.9"
               mandatory="false"
               name="interfacePackageSuffix"
               type="org.eclipse.egf.model.contract.type.StringTypeHolder">
            <description
                  id="contractElement.1203331335286.9.description">
               The package suffix defines the last segment of the Java packages into which the various types of classes are generated.
Interface package suffix is used for model interfaces and enumerations.
Default value : empty suffix
            </description>
         </contractElement>
         <contractElement
               id="contractElement.1203330527337.6"
               mandatory="false"
               name="implementationPackageSuffix"
               type="org.eclipse.egf.model.contract.type.StringTypeHolder">
            <description
                  id="contractElement.1203330527337.6.description">
               The package suffix defines the last segment of the Java packages into which the various types of classes are generated.
Implementation package suffix is used for model implementation classes.
Default value : impl
            </description>
         </contractElement>
         <contractElement
               id="contractElement.1224164754565.12"
               mandatory="false"
               name="mergeRulesPath"
               type="org.eclipse.egf.model.contract.type.StringTypeHolder">
            <description
                  id="contractElement.1224164754565.12.description">
               Relative path to the merge rules file (JMerge).
The path starts with the plug-in id whether it is deployed or not.
This requires that the generatorAdapterFactory is provided too.
            </description>
         </contractElement>
      </contract>
   </extension>
   <extension
         point="org.eclipse.egf.core.factoryComponent">
      <factoryComponent
            contractId="javaCodeGeneratorAsset.contract"
            id="javaCodeGeneratorAsset"
            name="EMF Model Code Generator from Ecore"
            productionPlanId="javaCodeGeneratorAsset.productionPlan">
         <description
               id="javaCodeGeneratorAsset.description">
            This factory component runs EMF Model code generator to produce a Java implementation for an Ecore model.
Default code generation behavior can be customized by providing a generator adapter factory.            
         </description>
      </factoryComponent>
   </extension>
</plugin>
