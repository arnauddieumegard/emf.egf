/**
 * 
 * Copyright (c) 2009 Thales Corporate Services S.A.S.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 * Thales Corporate Services S.A.S - initial API and implementation
 * 
 */
package org.eclipse.egf.model.types.provider;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.eclipse.egf.model.edit.EGFModelsEditPlugin;
import org.eclipse.egf.model.fcore.Context;
import org.eclipse.egf.model.fcore.Contract;
import org.eclipse.egf.model.fcore.ContextContainer;
import org.eclipse.egf.model.fcore.ContractContainer;
import org.eclipse.egf.model.fcore.FcorePackage;
import org.eclipse.egf.model.fcore.util.FcoreSwitch;
import org.eclipse.egf.model.types.TypesFactory;
import org.eclipse.egf.model.types.util.TypesAdapterFactory;
import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.common.util.ResourceLocator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.command.CommandParameter;
import org.eclipse.emf.edit.domain.EditingDomain;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IChildCreationExtender;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemColorProvider;
import org.eclipse.emf.edit.provider.IItemFontProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITableItemColorProvider;
import org.eclipse.emf.edit.provider.ITableItemFontProvider;
import org.eclipse.emf.edit.provider.ITableItemLabelProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TypesItemProviderAdapterFactory extends TypesAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypesItemProviderAdapterFactory() {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
    supportedTypes.add(ITableItemLabelProvider.class);
    supportedTypes.add(ITableItemColorProvider.class);
    supportedTypes.add(ITableItemFontProvider.class);
    supportedTypes.add(IItemColorProvider.class);
    supportedTypes.add(IItemFontProvider.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.egf.model.types.BigDecimalType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BigDecimalTypeItemProvider bigDecimalTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.egf.model.types.BigDecimalType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createBigDecimalTypeAdapter() {
    if (bigDecimalTypeItemProvider == null) {
      bigDecimalTypeItemProvider = new BigDecimalTypeItemProvider(this);
    }

    return bigDecimalTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.egf.model.types.BigIntegerType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BigIntegerTypeItemProvider bigIntegerTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.egf.model.types.BigIntegerType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createBigIntegerTypeAdapter() {
    if (bigIntegerTypeItemProvider == null) {
      bigIntegerTypeItemProvider = new BigIntegerTypeItemProvider(this);
    }

    return bigIntegerTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.egf.model.types.BooleanType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BooleanTypeItemProvider booleanTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.egf.model.types.BooleanType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createBooleanTypeAdapter() {
    if (booleanTypeItemProvider == null) {
      booleanTypeItemProvider = new BooleanTypeItemProvider(this);
    }

    return booleanTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.egf.model.types.ByteType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ByteTypeItemProvider byteTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.egf.model.types.ByteType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createByteTypeAdapter() {
    if (byteTypeItemProvider == null) {
      byteTypeItemProvider = new ByteTypeItemProvider(this);
    }

    return byteTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.egf.model.types.CharacterType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CharacterTypeItemProvider characterTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.egf.model.types.CharacterType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCharacterTypeAdapter() {
    if (characterTypeItemProvider == null) {
      characterTypeItemProvider = new CharacterTypeItemProvider(this);
    }

    return characterTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.egf.model.types.DateType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DateTypeItemProvider dateTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.egf.model.types.DateType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDateTypeAdapter() {
    if (dateTypeItemProvider == null) {
      dateTypeItemProvider = new DateTypeItemProvider(this);
    }

    return dateTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.egf.model.types.DoubleType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DoubleTypeItemProvider doubleTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.egf.model.types.DoubleType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDoubleTypeAdapter() {
    if (doubleTypeItemProvider == null) {
      doubleTypeItemProvider = new DoubleTypeItemProvider(this);
    }

    return doubleTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.egf.model.types.FloatType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FloatTypeItemProvider floatTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.egf.model.types.FloatType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createFloatTypeAdapter() {
    if (floatTypeItemProvider == null) {
      floatTypeItemProvider = new FloatTypeItemProvider(this);
    }

    return floatTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.egf.model.types.StringType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StringTypeItemProvider stringTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.egf.model.types.StringType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createStringTypeAdapter() {
    if (stringTypeItemProvider == null) {
      stringTypeItemProvider = new StringTypeItemProvider(this);
    }

    return stringTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.egf.model.types.IntegerType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IntegerTypeItemProvider integerTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.egf.model.types.IntegerType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createIntegerTypeAdapter() {
    if (integerTypeItemProvider == null) {
      integerTypeItemProvider = new IntegerTypeItemProvider(this);
    }

    return integerTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.egf.model.types.LongType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LongTypeItemProvider longTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.egf.model.types.LongType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createLongTypeAdapter() {
    if (longTypeItemProvider == null) {
      longTypeItemProvider = new LongTypeItemProvider(this);
    }

    return longTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.egf.model.types.ShortType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ShortTypeItemProvider shortTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.egf.model.types.ShortType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createShortTypeAdapter() {
    if (shortTypeItemProvider == null) {
      shortTypeItemProvider = new ShortTypeItemProvider(this);
    }

    return shortTypeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link org.eclipse.egf.model.types.GeneratorAdapterFactoryType} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GeneratorAdapterFactoryTypeItemProvider generatorAdapterFactoryTypeItemProvider;

  /**
   * This creates an adapter for a {@link org.eclipse.egf.model.types.GeneratorAdapterFactoryType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createGeneratorAdapterFactoryTypeAdapter() {
    if (generatorAdapterFactoryTypeItemProvider == null) {
      generatorAdapterFactoryTypeItemProvider = new GeneratorAdapterFactoryTypeItemProvider(this);
    }

    return generatorAdapterFactoryTypeItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory() {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type) {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type) {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type) {
    if (isFactoryForType(type)) {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener) {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener) {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void fireNotifyChanged(Notification notification) {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null) {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void dispose() {
    if (bigDecimalTypeItemProvider != null)
      bigDecimalTypeItemProvider.dispose();
    if (bigIntegerTypeItemProvider != null)
      bigIntegerTypeItemProvider.dispose();
    if (booleanTypeItemProvider != null)
      booleanTypeItemProvider.dispose();
    if (byteTypeItemProvider != null)
      byteTypeItemProvider.dispose();
    if (characterTypeItemProvider != null)
      characterTypeItemProvider.dispose();
    if (dateTypeItemProvider != null)
      dateTypeItemProvider.dispose();
    if (doubleTypeItemProvider != null)
      doubleTypeItemProvider.dispose();
    if (floatTypeItemProvider != null)
      floatTypeItemProvider.dispose();
    if (integerTypeItemProvider != null)
      integerTypeItemProvider.dispose();
    if (longTypeItemProvider != null)
      longTypeItemProvider.dispose();
    if (shortTypeItemProvider != null)
      shortTypeItemProvider.dispose();
    if (stringTypeItemProvider != null)
      stringTypeItemProvider.dispose();
    if (generatorAdapterFactoryTypeItemProvider != null)
      generatorAdapterFactoryTypeItemProvider.dispose();
  }

  /**
   * A child creation extender for the {@link FcorePackage}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static class FcoreChildCreationExtender implements IChildCreationExtender {
    /**
     * The switch for creating child descriptors specific to each extended class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected static class CreationSwitch extends FcoreSwitch<Object> {
      /**
       * The child descriptors being populated.
       * <!-- begin-user-doc -->
       * <!-- end-user-doc -->
       * @generated
       */
      protected List<Object> newChildDescriptors;

      /**
       * The domain in which to create the children.
       * <!-- begin-user-doc -->
       * <!-- end-user-doc -->
       * @generated
       */
      protected EditingDomain editingDomain;

      /**
       * Creates the a switch for populating child descriptors in the given domain.
       * <!-- begin-user-doc -->
       * <!-- end-user-doc -->
       * @generated
       */
      CreationSwitch(List<Object> newChildDescriptors, EditingDomain editingDomain) {
        this.newChildDescriptors = newChildDescriptors;
        this.editingDomain = editingDomain;
      }

      /**
       * <!-- begin-user-doc -->
       * <!-- end-user-doc -->
       * @generated
       */
      @Override
      public Object caseContract(Contract object) {
        newChildDescriptors.add(createChildParameter(FcorePackage.Literals.CONTRACT__TYPE, TypesFactory.eINSTANCE.createBigDecimalType()));

        newChildDescriptors.add(createChildParameter(FcorePackage.Literals.CONTRACT__TYPE, TypesFactory.eINSTANCE.createBigIntegerType()));

        newChildDescriptors.add(createChildParameter(FcorePackage.Literals.CONTRACT__TYPE, TypesFactory.eINSTANCE.createBooleanType()));

        newChildDescriptors.add(createChildParameter(FcorePackage.Literals.CONTRACT__TYPE, TypesFactory.eINSTANCE.createByteType()));

        newChildDescriptors.add(createChildParameter(FcorePackage.Literals.CONTRACT__TYPE, TypesFactory.eINSTANCE.createCharacterType()));

        newChildDescriptors.add(createChildParameter(FcorePackage.Literals.CONTRACT__TYPE, TypesFactory.eINSTANCE.createDateType()));

        newChildDescriptors.add(createChildParameter(FcorePackage.Literals.CONTRACT__TYPE, TypesFactory.eINSTANCE.createDoubleType()));

        newChildDescriptors.add(createChildParameter(FcorePackage.Literals.CONTRACT__TYPE, TypesFactory.eINSTANCE.createFloatType()));

        newChildDescriptors.add(createChildParameter(FcorePackage.Literals.CONTRACT__TYPE, TypesFactory.eINSTANCE.createIntegerType()));

        newChildDescriptors.add(createChildParameter(FcorePackage.Literals.CONTRACT__TYPE, TypesFactory.eINSTANCE.createLongType()));

        newChildDescriptors.add(createChildParameter(FcorePackage.Literals.CONTRACT__TYPE, TypesFactory.eINSTANCE.createShortType()));

        newChildDescriptors.add(createChildParameter(FcorePackage.Literals.CONTRACT__TYPE, TypesFactory.eINSTANCE.createStringType()));

        newChildDescriptors.add(createChildParameter(FcorePackage.Literals.CONTRACT__TYPE, TypesFactory.eINSTANCE.createGeneratorAdapterFactoryType()));

        return null;
      }

      /**
       * <!-- begin-user-doc -->
       * <!-- end-user-doc -->
       * @generated
       */
      @Override
      public Object caseContext(Context object) {
        newChildDescriptors.add(createChildParameter(FcorePackage.Literals.CONTEXT__TYPE, TypesFactory.eINSTANCE.createBigDecimalType()));

        newChildDescriptors.add(createChildParameter(FcorePackage.Literals.CONTEXT__TYPE, TypesFactory.eINSTANCE.createBigIntegerType()));

        newChildDescriptors.add(createChildParameter(FcorePackage.Literals.CONTEXT__TYPE, TypesFactory.eINSTANCE.createBooleanType()));

        newChildDescriptors.add(createChildParameter(FcorePackage.Literals.CONTEXT__TYPE, TypesFactory.eINSTANCE.createByteType()));

        newChildDescriptors.add(createChildParameter(FcorePackage.Literals.CONTEXT__TYPE, TypesFactory.eINSTANCE.createCharacterType()));

        newChildDescriptors.add(createChildParameter(FcorePackage.Literals.CONTEXT__TYPE, TypesFactory.eINSTANCE.createDateType()));

        newChildDescriptors.add(createChildParameter(FcorePackage.Literals.CONTEXT__TYPE, TypesFactory.eINSTANCE.createDoubleType()));

        newChildDescriptors.add(createChildParameter(FcorePackage.Literals.CONTEXT__TYPE, TypesFactory.eINSTANCE.createFloatType()));

        newChildDescriptors.add(createChildParameter(FcorePackage.Literals.CONTEXT__TYPE, TypesFactory.eINSTANCE.createIntegerType()));

        newChildDescriptors.add(createChildParameter(FcorePackage.Literals.CONTEXT__TYPE, TypesFactory.eINSTANCE.createLongType()));

        newChildDescriptors.add(createChildParameter(FcorePackage.Literals.CONTEXT__TYPE, TypesFactory.eINSTANCE.createShortType()));

        newChildDescriptors.add(createChildParameter(FcorePackage.Literals.CONTEXT__TYPE, TypesFactory.eINSTANCE.createStringType()));

        newChildDescriptors.add(createChildParameter(FcorePackage.Literals.CONTEXT__TYPE, TypesFactory.eINSTANCE.createGeneratorAdapterFactoryType()));

        return null;
      }

      /**
       * <!-- begin-user-doc -->
       * <!-- end-user-doc -->
       * @generated
       */
      protected CommandParameter createChildParameter(Object feature, Object child) {
        return new CommandParameter(null, feature, child);
      }

    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public Collection<Object> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
      ArrayList<Object> result = new ArrayList<Object>();
      new CreationSwitch(result, editingDomain).doSwitch((EObject) object);
      return result;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ResourceLocator getResourceLocator() {
      return EGFModelsEditPlugin.INSTANCE;
    }
  }

}
