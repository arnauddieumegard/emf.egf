<%
/**
 * <copyright>
 *
 * Copyright (c) 2005-2007 IBM Corporation and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors: 
 *   IBM - Initial API and implementation
 *
 * </copyright>
 */
%>
<%GenModel genModel = (GenModel)argument;%>
Manifest-Version: 1.0
Bundle-ManifestVersion: 2
Bundle-Name: %pluginName
Bundle-SymbolicName: <%=genModel.getModelPluginID()%>;singleton:=true
Bundle-Version: 1.0.0
Bundle-ClassPath: <%if (genModel.isRuntimeJar()) {%><%=genModel.getModelPluginID()%>.jar<%}else{%>.<%}%>
<%if (genModel.hasModelPluginClass()) {%>
Bundle-Activator: <%=genModel.getQualifiedModelPluginClassName()%>$Implementation
<%}%>
Bundle-Vendor: %providerName
Bundle-Localization: plugin
<%if (genModel.getComplianceLevel() == GenJDKLevel.JDK50_LITERAL) {%>
Bundle-RequiredExecutionEnvironment: J2SE-1.5
<%} else if (genModel.getComplianceLevel() == GenJDKLevel.JDK60_LITERAL) {%>
Bundle-RequiredExecutionEnvironment: JavaSE-1.6
<%}%>
<%
    TreeIterator<GenPackage> genPackagesIterator = 
      new AbstractTreeIterator<GenPackage>(genModel.getGenPackages(), false)
      {
        protected Iterator<GenPackage> getChildren(Object object)
        {
          return object instanceof Collection<?> ? 
            ((Collection<GenPackage>)object).iterator() :
            ((GenPackage)object).getNestedGenPackages().iterator();
        }
      };
      
  if (genPackagesIterator.hasNext()) { GenPackage genPackage = genPackagesIterator.next();%>
Export-Package: <%=genPackage.getClassPackageName()%><%while(genPackagesIterator.hasNext()) { genPackage = genPackagesIterator.next();%>,
 <%=genPackage.getClassPackageName()%><%}%>
<%}%>
<%
    TreeIterator<GenPackage> genPackagesIterator2 = 
      new AbstractTreeIterator<GenPackage>(genModel.getGenPackages(), false)
      {
        protected Iterator<GenPackage> getChildren(Object object)
        {
          return object instanceof Collection<?> ? 
            ((Collection<GenPackage>)object).iterator() :
            ((GenPackage)object).getNestedGenPackages().iterator();
        }
      };
      
      Iterator<GenPackage> usedGenPackagesIterator = genModel.getUsedGenPackages().iterator();
      
  if (genPackagesIterator2.hasNext()) { GenPackage genPackage = genPackagesIterator2.next();%>
Import-Package: <%=genPackage.getInterfacePackageName()%><%while(genPackagesIterator2.hasNext()) { genPackage = genPackagesIterator2.next();%>,
 <%=genPackage.getInterfacePackageName()%><%}%><%while(usedGenPackagesIterator.hasNext()) { genPackage = usedGenPackagesIterator.next();%>,
 <%=genPackage.getInterfacePackageName()%><%}%>
<%}%>
<%//we want to depend on cdo generated plugins before eventual others modelPluginVariables, because they may depend on the non cdo code
List<String> modelRequiredPlugins = genModel.getModelRequiredPlugins();
modelRequiredPlugins.removeAll(((GenModelImpl) genModel).getEffectiveModelPluginIDs());
modelRequiredPlugins.addAll(((GenModelImpl) genModel).getEffectiveModelPluginIDs());%>
<%Iterator<String> requiredPluginIterator = modelRequiredPlugins.iterator(); if (requiredPluginIterator.hasNext()) { String pluginID = requiredPluginIterator.next();%>
Require-Bundle: <%=pluginID%><%if (!pluginID.startsWith("org.eclipse.core.runtime")){%>;visibility:=reexport<%} while(requiredPluginIterator.hasNext()) { pluginID = requiredPluginIterator.next();%>,
 <%=pluginID%><%if (!pluginID.startsWith("org.eclipse.core.runtime")){%>;visibility:=reexport<%}}%>
<%}%>
<%if (genModel.getRuntimeVersion() == GenRuntimeVersion.EMF22 || genModel.getRuntimeVersion() == GenRuntimeVersion.EMF23) {%>
Eclipse-LazyStart: true
<%}%>
Bundle-ActivationPolicy: lazy
